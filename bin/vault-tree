#!/usr/bin/env ruby
require 'gli'
require_relative '../config/initialize'

include GLI::App
program_desc 'The Self Enforcing Contract'
version '0.0.1'

########################################
# READ IN SETTINGS

SETTINGS_FILE = File.expand_path('~/projects/vault-tree/vault-tree/spec/support/cli/.vt')
settings = {password: nil, contracts: {}, data: {}}

if File.exists? SETTINGS_FILE
  file_contents = YAML.load_file(SETTINGS_FILE)
  settings.merge!(file_contents)
else
  File.open(SETTINGS_FILE , 'w') {|f| YAML::dump(options,f) }
  STDERR.puts "Initialized settings file in #{SETTINGS_FILE }"
end

########################################


desc 'User contract master password'
flag [:p,:password]

desc 'Write the newly modified contract to disk'
switch [:w]

desc 'List available contracts'
arg_name 'Describe arguments to open here'
command :contracts do |c|
  c.action do |global_options,options,args|
    VaultTree::CLI::ContractPaths.new(
      contract_settings: settings[:contracts]
    ).list
  end
end

desc 'Checkout a new active contract'
arg_name 'contract name'
command :checkout do |c|
  c.action do |global_options,options,args|
    puts 'checkout ran' 
    VaultTree::CLI::Checkout.new()
  end
end

desc 'Retrieve the contents of a vault'
arg_name 'Describe arguments to open here'
command :open do |c|
  c.action do |global_options,options,args|
    VaultTree::CLI::Open.new(
      master_password: global_options[:p],
      contract_path: args[0],
      vault_id: args[1]
    ).execute
  end
end

desc 'Close a vault and all of its ancestors'
arg_name 'vault_id'
command :close do |c|

  c.desc 'External data needed to fill vaults'
  c.flag [:d,:data], default_value: {}

  c.action do |global_options,options,args|
    VaultTree::CLI::Close.new(
      master_password: global_options[:p],
      external_data: options[:d],
      contract_path: args[0],
      vault_id: args[1],
      write_flag: global_options[:w]
    ).execute
  end
end

desc 'Contract status'
arg_name 'Describe arguments to status here'
command :status do |c|
  c.action do |global_options,options,args|
    VaultTree::CLI::Status.new(nil,
      contract_path: args[0]
    ).execute
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
