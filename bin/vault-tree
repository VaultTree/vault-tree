#!/usr/bin/env ruby
require 'gli'
require_relative '../config/initialize'

include GLI::App
program_desc 'The Self Enforcing Contract'
version '0.0.1'


########################################
# READ IN SETTINGS

test_settings_file = VaultTree::CLI::SettingsFile.new.test_settings_path
user_settings_file = VaultTree::CLI::SettingsFile.new.user_settings_path

if File.exists?(test_settings_file)
  SETTINGS_FILE = test_settings_file 
else
  SETTINGS_FILE = user_settings_file 
end

settings = {password: nil, contracts: {}, data: {}}
if File.exists? SETTINGS_FILE
  file_contents = YAML.load_file(SETTINGS_FILE)
  settings.merge!(file_contents)
else
  options = { password: 'EMPTY_SETTINGS_PASSWORD', contracts: {}, active: '', data: {} }
  File.open(SETTINGS_FILE , 'w') {|f| YAML::dump(options,f) }
  STDERR.puts "Initialized settings file in #{SETTINGS_FILE}"
end

########################################

desc 'Show your current Vault Tree settings'
command :settings do |c|
  c.action do |global_options,options,args|
    puts VaultTree::CLI::Settings.new(SETTINGS_FILE).raw_contents
  end
end

desc 'Get the status of the active contract'
command :status do |c|
  c.action do |global_options,options,args|
    settings = VaultTree::CLI::Settings.new(SETTINGS_FILE)
    VaultTree::CLI::Status.new(settings).run
  end
end

desc '[list|add|rm|show] actions for contracts'
command :contract do |c|
  c.action do |global_options,options,args|
    settings = VaultTree::CLI::Settings.new(SETTINGS_FILE)
    method = args[0].to_sym 
    VaultTree::CLI::Contract.new(settings).send(method,args[1],args[2])
  end
end

desc '[list|add|rm|show] external data to fill your vaults'
command :data do |c|
  c.action do |global_options,options,args|
    settings = VaultTree::CLI::Settings.new(SETTINGS_FILE)
    method = args[0].to_sym 
    VaultTree::CLI::Data.new(settings).send(method,args[1],args[2])
  end
end

desc 'Checkout a new active contract'
arg_name 'contract name'
command :checkout do |c|
  c.action do |global_options,options,args|
    settings = VaultTree::CLI::Settings.new(SETTINGS_FILE)
    VaultTree::CLI::Checkout.new(settings).run(args[0])
  end
end

desc '[open|close] Open a vault. Close a vault and its ancestors'
command :vault do |c|
  c.action do |global_options,options,args|
    settings = VaultTree::CLI::Settings.new(SETTINGS_FILE)
    method = args[0].to_sym
    VaultTree::CLI::Vault.new(settings).send(method,args[1],args[2])
  end
end

#desc 'Retrieve the contents of a vault'
#arg_name 'Describe arguments to open here'
#command :open do |c|
#  c.action do |global_options,options,args|
#    VaultTree::CLI::Open.new(
#      master_password: global_options[:p],
#      contract_path: args[0],
#      vault_id: args[1]
#    ).execute
#  end
#end

#desc 'Close a vault and all of its ancestors'
#arg_name 'vault_id'
#command :close do |c|

#  c.desc 'External data needed to fill vaults'
#  c.flag [:d,:data], default_value: {}

#  c.action do |global_options,options,args|
#    VaultTree::CLI::Close.new(
#      master_password: global_options[:p],
#      external_data: options[:d],
#      contract_path: args[0],
#      vault_id: args[1],
#      write_flag: global_options[:w]
#   ).execute
#  end
#end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
