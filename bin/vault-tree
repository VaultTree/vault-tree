#!/usr/bin/env ruby
require 'gli'
include GLI::App
require File.expand_path('../../lib/vault-tree', __FILE__)
require "uuidtools"

module VaultTree
  module Api
    module Contracts

      def self.enforce(opts = {})
        path = 'path/to/default'
        json = VaultTree::Import::ContractReader.new(path).read
        VaultTree::Contract.new(json).enforce
      end

      def self.generate_contract
        require_relative '../.vault-tree/templates/escrow.rb'
        puts VaultTree::Escrow.new.generate_contract
      end

    end
  end
end

module VaultTree
  module Import
    class ContractReader
      attr_reader :path

      def initialize(path)
        @path = path
      end

      def read
        puts 'Reading in file at:'
        puts path
        '[]'
      end
    end
  end
end

module VaultTree
  class Contract
    attr_reader :string

    def initialize(json)
      @string = json
    end

    def enforce
      puts 'enforcing myself'
    end
  end
end

program_desc 'Self Enforcing BitCoin Contracts'

version VaultTree::VERSION

desc 'Describe some switch here'
switch [:s,:switch]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f,:flagname]

desc 'Enforce the active contract'
arg_name 'Describe arguments to enforce here'
command :enforce do |c|
  c.desc 'Describe a switch to enforce'
  c.switch :s

  c.desc 'Describe a flag to enforce'
  c.default_value 'default'
  c.flag :f
  c.action do |global_options,options,args|
    VaultTree::Api::Contracts.enforce
  end
end

desc 'Generate a contract from a template'
arg_name 'Describe arguments to generate here'
command :generate do |c|
  c.desc 'Describe a switch to generate'
  c.switch :s

  c.desc 'Describe a flag to generate'
  c.default_value 'default'
  c.flag :f
  c.action do |global_options,options,args|
    # Your command logic here
    # If you have any errors, just raise them
    # raise "that command made no sense"
    puts "generate command ran"
    VaultTree::Api::Contracts.generate_contract
  end
end

desc 'Create or delete public and private keys'
arg_name 'Describe arguments to key here'
command :key do |c|
  c.desc 'Describe a switch to key'
  c.switch :s

  c.desc 'Describe a flag to key'
  c.default_value 'default'
  c.flag :f
  c.action do |global_options,options,args|
    # Your command logic here
    # If you have any errors, just raise them
    # raise "that command made no sense"
    puts "key command ran"
  end
end

desc 'Create, delete, and rename remote urls'
arg_name 'Describe arguments to url here'
command :url do |c|
  c.desc 'Describe a switch to url'
  c.switch :s

  c.desc 'Describe a flag to key'
  c.default_value 'default'
  c.flag :f
  c.action do |global_options,options,args|
    # Your command logic here
    # If you have any errors, just raise them
    # raise "that command made no sense"
    puts "url command ran"
  end
end

desc 'Download, objects and refs from remote urls'
arg_name 'Describe arguments to fetch here'
command :fetch do |c|
  c.desc 'Describe a switch to fetch'
  c.switch :s

  c.desc 'Describe a flag to fetch'
  c.default_value 'default'
  c.flag :f
  c.action do |global_options,options,args|
    # Your command logic here
    # If you have any errors, just raise them
    # raise "that command made no sense"
    puts "fetch command ran"
  end
end

desc 'Show the status of active contracts '
arg_name 'Describe arguments to status here'
command :status do |c|
  c.desc 'Describe a switch to status'
  c.switch :s

  c.desc 'Describe a flag to status'
  c.default_value 'default'
  c.flag :f
  c.action do |global_options,options,args|
    # Your command logic here
    # If you have any errors, just raise them
    # raise "that command made no sense"
    puts "status command ran"
  end
end

desc 'Show contract logs'
arg_name 'Describe arguments to log here'
command :log do |c|
  c.desc 'Describe a switch to log'
  c.switch :s

  c.desc 'Describe a flag to log'
  c.default_value 'default'
  c.flag :f
  c.action do |global_options,options,args|
    # Your command logic here
    # If you have any errors, just raise them
    # raise "that command made no sense"
    puts "log command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
