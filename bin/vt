#!/usr/bin/env ruby
#/ Usage: vt [options]...
# ** Tip: use #/ lines to define the --help usage message.
# ** Tip: Useful: https://practicingruby.com/articles/building-unix-style-command-line-applications
$stderr.sync = true

require_relative '../lib/vault-tree'
require_relative '../lib/util/cli_parsing'

def summary
  File.read File.expand_path('../doc/help.txt', File.dirname(__FILE__))
end


class Summary
  include VaultTree::CliParsing

  def initialize(vaults, arguments)
    @vaults = vaults
    @arguments = arguments
  end
  attr_reader :vaults, :arguments

  def display!
    if display?
      STDOUT.write(summary)
      exit(0)
    end
  end

  def display?
    display_summary?(vaults, arguments)
  end
end

class RandomKey

  def initialize(vaults, arguments)
    @vaults = vaults
    @arguments = arguments
  end
  attr_reader :vaults, :arguments

  # TODO: This needs to be cleaned up
  # Shift this logic over the cli parsing utility
  def generate!
    if vaults.nil? && ARGV[0] == 'key'
      STDOUT.write VaultTree::LockSmith.new.generate_secret_key
      exit(0)
    end
  end
end

class CommandLineAction
  include VaultTree::CliParsing

  def initialize(vaults, arguments)
    @vaults = vaults
    @arguments = arguments
  end
  attr_reader :vaults, :arguments

  def action
    @action = parse_action!(vaults, arguments)
  end

  def execute!
    if action[:door_action] ==  'close'
      STDOUT.write VaultTree::VaultCollection.new(action[:input]).close_vault(action[:vault_id], action[:external_input])
      exit(0)
    end

    if action[:door_action] ==  'open'
      STDOUT.write VaultTree::VaultCollection.new(action[:input]).open_vault(action[:vault_id], action[:external_input])
      exit(0)
    end
  rescue => e
    STDOUT.write "#{parse_exception!(e)[:type]}: #{parse_exception!(e)[:message]}"
    exit(1)
  end
end

if (STDIN.tty?)
  standard_in = nil
  arguments = ARGV
else
  standard_in = $stdin.read
  arguments = ARGV
end

# Check for summary display
#
# if the user simply types 'vt' then there should be no error and the
# summary display should print
Summary.new(standard_in, arguments).display!

# TODO: This needs to be speced out and cleaned up
RandomKey.new(standard_in, arguments).generate!

# Validated and parse cli input
#
# After the stdin and arguments are caputured. they are organized
# and validated before going to the vault tree library code.
CommandLineAction.new(standard_in, arguments).execute!
