{
"header": {
"title":"Reference Contract 1.0.0",
"description":"This is a test fixture. It is a contract built to use all Vault Tree functionality"
},
"vaults": {

"bob_contract_secret":{
  "description":"contract specific password to lock private information",
  "fill_with": "RANDOM_NUMBER",
  "lock_with": "MASTER_PASSPHRASE",
  "unlock_with": "MASTER_PASSPHRASE",
  "contents": ""
},

"alice_contract_secret":{
  "description":"contract specific password to lock private information",
  "fill_with": "RANDOM_NUMBER",
  "lock_with": "MASTER_PASSPHRASE",
  "unlock_with": "MASTER_PASSPHRASE",
  "contents": ""
},

"alice_public_encryption_key":{
  "description":"public key for asymmetric encryption",
  "fill_with": "PUBLIC_ENCRYPTION_KEY['alice_decryption_key']",
  "lock_with": "UNLOCKED",
  "unlock_with": "UNLOCKED",
  "contents": ""
},

"bob_public_encryption_key":{
  "description":"public key for asymmetric encryption",
  "fill_with": "PUBLIC_ENCRYPTION_KEY['bob_decryption_key']",
  "lock_with": "UNLOCKED",
  "unlock_with": "UNLOCKED",
  "contents": ""
},

"alice_decryption_key":{
  "description":"private key for asymmetric decryption",
  "fill_with": "DECRYPTION_KEY",
  "lock_with": "CONTENTS['alice_contract_secret']",
  "unlock_with": "CONTENTS['alice_contract_secret']",
  "contents": ""
},

"bob_decryption_key":{
  "description":"private key for asymmetric decryption",
  "fill_with": "DECRYPTION_KEY",
  "lock_with": "CONTENTS['bob_contract_secret']",
  "unlock_with": "CONTENTS['bob_contract_secret']",
  "contents": ""
},

"congratulations_message":{
  "description":"A simple message for Bob to put in the final vault",
  "fill_with": "EXTERNAL_DATA",
  "lock_with": "CONTENTS['bob_contract_secret']",
  "unlock_with": "CONTENTS['bob_contract_secret']",
  "contents": ""
},

"vault_two_key":{
  "description":"Key to lock vault two. Once Bob locks the second vault he will put this key inside vault one.",
  "fill_with": "RANDOM_NUMBER",
  "lock_with": "CONTENTS['bob_contract_secret']",
  "unlock_with": "CONTENTS['bob_contract_secret']",
  "contents": ""
},

"vault_three_key":{
  "description":"Key to lock vault three. Once Bob locks the third vault he will put this key inside vault two.",
  "fill_with": "RANDOM_NUMBER",
  "lock_with": "CONTENTS['bob_contract_secret']",
  "unlock_with": "CONTENTS['bob_contract_secret']",
  "contents": ""
},

"first":{
  "description":"This is an asymmetric vault with mutual authentication. It contains the key to vault two and is locked by Bob, with Alices public key. Only Alice can unlock it.",
  "fill_with": "CONTENTS['vault_two_key']",
  "lock_with": "SHARED_KEY['alice_public_encryption_key','bob_decryption_key']",
  "unlock_with": "SHARED_KEY['bob_public_encryption_key','alice_decryption_key']",
  "contents": ""
},

"second":{
  "description":"Alice unlocks this vault with the key held in the first vault.",
  "fill_with": "CONTENTS['vault_three_key']",
  "lock_with": "CONTENTS['vault_two_key']",
  "unlock_with": "CONTENTS['first']",
  "contents": ""
},

"third":{
  "description":"Contains a simple message. Unlock the key found in the second vault.",
  "fill_with": "CONTENTS['congratulations_message']",
  "lock_with": "CONTENTS['vault_three_key']",
  "unlock_with": "CONTENTS['second']",
  "contents": ""
},

"sender_btc_signing_key":{
  "description":"This is the secret Bitcoin Signing Key that SENDER wishes to transfer to RECEIVER. The RECEIVER can unlock only after he has the revealed address.",
  "fill_with": "EXTERNAL_DATA",
  "lock_with": "CONTENTS['sender_concealed_destination_wallet_address']",
  "unlock_with": "CONTENTS['receiver_revealed_destination_wallet_address']",
  "contents": ""
},

"sender_origin_wallet_address":{
  "description":"SENDER origin wallet address. Chosen by SENDER and known in advance to RECEIVER.",
  "fill_with": "EXTERNAL_DATA",
  "lock_with": "UNLOCKED",
  "unlock_with": "UNLOCKED",
  "contents": ""
},

"sender_concealed_destination_wallet_address":{
  "description":"SENDER concealed copy of the destination wallet address. This wallet address is kept secret until SENDER chosed to transfer BTC to it",
  "fill_with": "EXTERNAL_DATA",
  "lock_with": "CONTENTS['sender_secret']",
  "unlock_with": "CONTENTS['sender_secret']",
  "contents": ""
},

"receiver_revealed_destination_wallet_address":{
  "description":"RECEIVER monitors the Block Chain and fills this vault with the newly revealied destination address.",
  "fill_with": "EXTERNAL_DATA",
  "lock_with": "CONTENTS['receiver_secret']",
  "unlock_with": "CONTENTS['receiver_secret']",
  "contents": ""
},

"receiver_secret":{
  "fill_with": "RANDOM_NUMBER",
  "lock_with": "MASTER_PASSPHRASE",
  "unlock_with": "MASTER_PASSPHRASE",
  "contents": ""
},

"sender_secret":{
  "description":"Contract specific password for SENDER. Used to Lock the SENDER private information.",
  "fill_with": "RANDOM_NUMBER",
  "lock_with": "MASTER_PASSPHRASE",
  "unlock_with": "MASTER_PASSPHRASE",
  "contents": ""
},


"message":{
  "description":"Vault with a simple message.",
  "fill_with": "EXTERNAL_DATA",
  "lock_with": "MASTER_PASSPHRASE",
  "unlock_with": "MASTER_PASSPHRASE",
  "contents": ""
},

"random_vault_key":{
  "description":"Random Number",
  "fill_with": "RANDOM_NUMBER",
  "lock_with": "MASTER_PASSPHRASE",
  "unlock_with": "MASTER_PASSPHRASE",
  "contents": ""
},

"message_locked_with_random":{
  "description":"A simple message locked with a random number",
  "fill_with": "EXTERNAL_DATA",
  "lock_with": "CONTENTS['random_vault_key']",
  "unlock_with": "CONTENTS['random_vault_key']",
  "contents": ""
},

"message_locked_with_unlocked_random_number":{
  "fill_with": "CONTENTS['message_locked_with_random']",
  "lock_with": "CONTENTS['unlocked_random_key']",
  "unlock_with": "CONTENTS['unlocked_random_key']",
  "contents": ""
},

"unlocked_random_key":{
  "description":"An unlocked random key",
  "fill_with": "CONTENTS['random_vault_key']",
  "lock_with": "UNLOCKED",
  "unlock_with": "UNLOCKED",
  "contents": ""
},

"another_decryption_key":{
  "fill_with": "DECRYPTION_KEY",
  "lock_with": "MASTER_PASSPHRASE",
  "unlock_with": "MASTER_PASSPHRASE",
  "contents": ""
},

"another_public_key":{
  "fill_with": "PUBLIC_ENCRYPTION_KEY['another_decryption_key']",
  "lock_with": "UNLOCKED",
  "unlock_with": "UNLOCKED",
  "contents": ""
},

"my_decryption_key":{
  "fill_with": "DECRYPTION_KEY",
  "lock_with": "MASTER_PASSPHRASE",
  "unlock_with": "MASTER_PASSPHRASE",
  "contents": ""
},

"my_public_key":{
  "fill_with": "PUBLIC_ENCRYPTION_KEY['my_decryption_key']",
  "lock_with": "UNLOCKED",
  "unlock_with": "UNLOCKED",
  "contents": ""
},

"asymmetric_message":{
  "fill_with": "EXTERNAL_DATA",
  "lock_with": "SHARED_KEY['another_public_key','my_decryption_key']",
  "unlock_with": "SHARED_KEY['my_public_key','another_decryption_key']",
  "contents": ""
},

"a_consent_key":{
  "fill_with": "RANDOM_NUMBER",
  "lock_with": "EXTERNAL_DATA",
  "unlock_with": "EXTERNAL_DATA",
  "contents": ""
},

"b_consent_key":{
  "fill_with": "RANDOM_NUMBER",
  "lock_with": "EXTERNAL_DATA",
  "unlock_with": "EXTERNAL_DATA",
  "contents": ""
},

"c_consent_key":{
  "fill_with": "RANDOM_NUMBER",
  "lock_with": "EXTERNAL_DATA",
  "unlock_with": "EXTERNAL_DATA",
  "contents": ""
},

"abc_joint_consent_key":{
  "fill_with": "RANDOM_NUMBER",
  "lock_with": "SPLIT_KEY['a_consent_key','b_consent_key','c_consent_key']",
  "unlock_with": "SPLIT_KEY['a_consent_key','b_consent_key','c_consent_key']",
  "contents": ""
},

"abc_consent_message":{
  "fill_with": "EXTERNAL_DATA",
  "lock_with": "CONTENTS['abc_joint_consent_key']",
  "unlock_with": "CONTENTS['abc_joint_consent_key']",
  "contents": ""
}

}
}
